/* Auto-generated by genmsg_cpp for file /home/user/workspaces/ros/Armed-turtlebot/mc/srv/mc_updateBelief.srv */
#ifndef MC_SERVICE_MC_UPDATEBELIEF_H
#define MC_SERVICE_MC_UPDATEBELIEF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mc
{
template <class ContainerAllocator>
struct mc_updateBeliefRequest_ {
  typedef mc_updateBeliefRequest_<ContainerAllocator> Type;

  mc_updateBeliefRequest_()
  : belief()
  , value(0)
  {
  }

  mc_updateBeliefRequest_(const ContainerAllocator& _alloc)
  : belief(_alloc)
  , value(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _belief_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  belief;

  typedef int64_t _value_type;
  int64_t value;


  typedef boost::shared_ptr< ::mc::mc_updateBeliefRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mc::mc_updateBeliefRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mc_updateBeliefRequest
typedef  ::mc::mc_updateBeliefRequest_<std::allocator<void> > mc_updateBeliefRequest;

typedef boost::shared_ptr< ::mc::mc_updateBeliefRequest> mc_updateBeliefRequestPtr;
typedef boost::shared_ptr< ::mc::mc_updateBeliefRequest const> mc_updateBeliefRequestConstPtr;


template <class ContainerAllocator>
struct mc_updateBeliefResponse_ {
  typedef mc_updateBeliefResponse_<ContainerAllocator> Type;

  mc_updateBeliefResponse_()
  {
  }

  mc_updateBeliefResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mc::mc_updateBeliefResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct mc_updateBeliefResponse
typedef  ::mc::mc_updateBeliefResponse_<std::allocator<void> > mc_updateBeliefResponse;

typedef boost::shared_ptr< ::mc::mc_updateBeliefResponse> mc_updateBeliefResponsePtr;
typedef boost::shared_ptr< ::mc::mc_updateBeliefResponse const> mc_updateBeliefResponseConstPtr;

struct mc_updateBelief
{

typedef mc_updateBeliefRequest Request;
typedef mc_updateBeliefResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct mc_updateBelief
} // namespace mc

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mc::mc_updateBeliefRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mc::mc_updateBeliefRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mc::mc_updateBeliefRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e50891a9fcb180110e784cd3637d31ff";
  }

  static const char* value(const  ::mc::mc_updateBeliefRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe50891a9fcb18011ULL;
  static const uint64_t static_value2 = 0x0e784cd3637d31ffULL;
};

template<class ContainerAllocator>
struct DataType< ::mc::mc_updateBeliefRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/mc_updateBeliefRequest";
  }

  static const char* value(const  ::mc::mc_updateBeliefRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mc::mc_updateBeliefRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string belief\n\
int64 value\n\
\n\
";
  }

  static const char* value(const  ::mc::mc_updateBeliefRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mc::mc_updateBeliefResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::mc::mc_updateBeliefResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/mc_updateBeliefResponse";
  }

  static const char* value(const  ::mc::mc_updateBeliefResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::mc::mc_updateBeliefResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mc::mc_updateBeliefResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mc::mc_updateBeliefRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.belief);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mc_updateBeliefRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mc::mc_updateBeliefResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mc_updateBeliefResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mc::mc_updateBelief> {
  static const char* value() 
  {
    return "e50891a9fcb180110e784cd3637d31ff";
  }

  static const char* value(const mc::mc_updateBelief&) { return value(); } 
};

template<>
struct DataType<mc::mc_updateBelief> {
  static const char* value() 
  {
    return "mc/mc_updateBelief";
  }

  static const char* value(const mc::mc_updateBelief&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mc::mc_updateBeliefRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e50891a9fcb180110e784cd3637d31ff";
  }

  static const char* value(const mc::mc_updateBeliefRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mc::mc_updateBeliefRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/mc_updateBelief";
  }

  static const char* value(const mc::mc_updateBeliefRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mc::mc_updateBeliefResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e50891a9fcb180110e784cd3637d31ff";
  }

  static const char* value(const mc::mc_updateBeliefResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mc::mc_updateBeliefResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/mc_updateBelief";
  }

  static const char* value(const mc::mc_updateBeliefResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MC_SERVICE_MC_UPDATEBELIEF_H

