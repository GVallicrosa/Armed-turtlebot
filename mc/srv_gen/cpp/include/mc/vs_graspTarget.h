/* Auto-generated by genmsg_cpp for file /export/home/james.rowell/ros_workspace/Armed-turtlebot/mc/srv/vs_graspTarget.srv */
#ifndef MC_SERVICE_VS_GRASPTARGET_H
#define MC_SERVICE_VS_GRASPTARGET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mc
{
template <class ContainerAllocator>
struct vs_graspTargetRequest_ {
  typedef vs_graspTargetRequest_<ContainerAllocator> Type;

  vs_graspTargetRequest_()
  {
  }

  vs_graspTargetRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::mc::vs_graspTargetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mc::vs_graspTargetRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct vs_graspTargetRequest
typedef  ::mc::vs_graspTargetRequest_<std::allocator<void> > vs_graspTargetRequest;

typedef boost::shared_ptr< ::mc::vs_graspTargetRequest> vs_graspTargetRequestPtr;
typedef boost::shared_ptr< ::mc::vs_graspTargetRequest const> vs_graspTargetRequestConstPtr;


template <class ContainerAllocator>
struct vs_graspTargetResponse_ {
  typedef vs_graspTargetResponse_<ContainerAllocator> Type;

  vs_graspTargetResponse_()
  {
  }

  vs_graspTargetResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::mc::vs_graspTargetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mc::vs_graspTargetResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct vs_graspTargetResponse
typedef  ::mc::vs_graspTargetResponse_<std::allocator<void> > vs_graspTargetResponse;

typedef boost::shared_ptr< ::mc::vs_graspTargetResponse> vs_graspTargetResponsePtr;
typedef boost::shared_ptr< ::mc::vs_graspTargetResponse const> vs_graspTargetResponseConstPtr;

struct vs_graspTarget
{

typedef vs_graspTargetRequest Request;
typedef vs_graspTargetResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct vs_graspTarget
} // namespace mc

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mc::vs_graspTargetRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mc::vs_graspTargetRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mc::vs_graspTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::mc::vs_graspTargetRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::mc::vs_graspTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/vs_graspTargetRequest";
  }

  static const char* value(const  ::mc::vs_graspTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mc::vs_graspTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::mc::vs_graspTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mc::vs_graspTargetRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mc::vs_graspTargetResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mc::vs_graspTargetResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mc::vs_graspTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::mc::vs_graspTargetResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::mc::vs_graspTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/vs_graspTargetResponse";
  }

  static const char* value(const  ::mc::vs_graspTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mc::vs_graspTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::mc::vs_graspTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mc::vs_graspTargetResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mc::vs_graspTargetRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct vs_graspTargetRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mc::vs_graspTargetResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct vs_graspTargetResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mc::vs_graspTarget> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const mc::vs_graspTarget&) { return value(); } 
};

template<>
struct DataType<mc::vs_graspTarget> {
  static const char* value() 
  {
    return "mc/vs_graspTarget";
  }

  static const char* value(const mc::vs_graspTarget&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mc::vs_graspTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const mc::vs_graspTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mc::vs_graspTargetRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/vs_graspTarget";
  }

  static const char* value(const mc::vs_graspTargetRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mc::vs_graspTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const mc::vs_graspTargetResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mc::vs_graspTargetResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mc/vs_graspTarget";
  }

  static const char* value(const mc::vs_graspTargetResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MC_SERVICE_VS_GRASPTARGET_H

